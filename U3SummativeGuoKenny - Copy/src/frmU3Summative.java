/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.util.Random;
/**
 *
 * @author Kenny Guo
 * 07/18/22
 * Unit 3 summative
 */
public class frmU3Summative extends javax.swing.JFrame {
//Set variables outside of the button executions so that the values do not get reset every time the "Battle" button is clicked
//Variable for round is 0 at the beginning, random is set to 0, both scores must be 0, and two 3 length arrays
    int intRound= 0;
    int intRandom = 0;
    int intUserScore = 0;
    int intComputerScore = 0;
    int [] intUserArr1 = new int[3];
    int [] intComputerArr2 = new int[3];
    
    

    /**
     * Creates new form frmU3Summative
     */
    public frmU3Summative() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new java.awt.Label();
        btnBattle = new java.awt.Button();
        txtPointsOne = new java.awt.Label();
        lblPointsTwo = new java.awt.Label();
        txtComputerScore = new java.awt.TextField();
        txtUserScore = new java.awt.TextField();
        label1 = new java.awt.Label();
        txtChoice = new java.awt.TextField();
        txtYourChoice = new java.awt.Label();
        lblRoundOneComputer = new java.awt.Label();
        lblRoundThreeComputer = new java.awt.Label();
        lblRoundTwoComputer = new java.awt.Label();
        lblHeader = new java.awt.Label();
        lblRoundOnePerson = new java.awt.Label();
        lblRoundThreePerson = new java.awt.Label();
        lblRoundTwoPerson = new java.awt.Label();
        txtRoundOnePerson1 = new java.awt.Label();
        txtRoundOnePerson2 = new java.awt.Label();
        txtRoundOnePerson3 = new java.awt.Label();
        lblOutput = new java.awt.Label();
        btnReset = new java.awt.Button();
        panel1 = new java.awt.Panel();
        panel2 = new java.awt.Panel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        lblTitle.setFont(new java.awt.Font("Garamond", 1, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 50, 100));
        lblTitle.setText("Rock Paper or Scissors?");

        btnBattle.setBackground(new java.awt.Color(120, 2, 2));
        btnBattle.setFont(new java.awt.Font("Georgia", 1, 36)); // NOI18N
        btnBattle.setForeground(new java.awt.Color(60, 0, 0));
        btnBattle.setLabel("BATTLE!");
        btnBattle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBattleActionPerformed(evt);
            }
        });

        txtPointsOne.setFont(new java.awt.Font("Euclid", 1, 18)); // NOI18N
        txtPointsOne.setForeground(new java.awt.Color(100, 0, 150));
        txtPointsOne.setText("Your Points");

        lblPointsTwo.setFont(new java.awt.Font("Euclid", 1, 18)); // NOI18N
        lblPointsTwo.setForeground(new java.awt.Color(100, 0, 150));
        lblPointsTwo.setText("Computer Points");

        txtComputerScore.setFont(new java.awt.Font("Dubai Medium", 1, 24)); // NOI18N

        txtUserScore.setFont(new java.awt.Font("Dubai Medium", 1, 24)); // NOI18N
        txtUserScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserScoreActionPerformed(evt);
            }
        });

        label1.setBackground(new java.awt.Color(255, 255, 255));
        label1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        label1.setFont(new java.awt.Font("Garamond", 1, 14)); // NOI18N
        label1.setForeground(new java.awt.Color(0, 50, 100));
        label1.setText("Can you win against the computer? Type either \"rock\", \"paper\" or \"scissors\" in the box under \"Your Choice\" , then click \"BATTLE!\" to begin. There are three rounds in total.");

        txtChoice.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtChoice.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N

        txtYourChoice.setFont(new java.awt.Font("Euclid", 1, 18)); // NOI18N
        txtYourChoice.setForeground(new java.awt.Color(100, 0, 150));
        txtYourChoice.setName("Your Choice"); // NOI18N
        txtYourChoice.setText("Your Choice");

        lblRoundOneComputer.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        lblRoundOneComputer.setForeground(new java.awt.Color(100, 100, 200));
        lblRoundOneComputer.setText("The computer chooses:");

        lblRoundThreeComputer.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        lblRoundThreeComputer.setForeground(new java.awt.Color(100, 100, 200));
        lblRoundThreeComputer.setText("The computer chooses:");

        lblRoundTwoComputer.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        lblRoundTwoComputer.setForeground(new java.awt.Color(100, 100, 200));
        lblRoundTwoComputer.setText("The computer chooses: ");

        lblHeader.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        lblHeader.setText("Round History");

        lblRoundOnePerson.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        lblRoundOnePerson.setForeground(new java.awt.Color(100, 100, 200));
        lblRoundOnePerson.setText("You chose:");

        lblRoundThreePerson.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        lblRoundThreePerson.setForeground(new java.awt.Color(100, 100, 200));
        lblRoundThreePerson.setText("You chose:");

        lblRoundTwoPerson.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        lblRoundTwoPerson.setForeground(new java.awt.Color(100, 100, 200));
        lblRoundTwoPerson.setText("You chose:");

        txtRoundOnePerson1.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        txtRoundOnePerson1.setForeground(new java.awt.Color(0, 100, 200));
        txtRoundOnePerson1.setText("Round 1 -");

        txtRoundOnePerson2.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        txtRoundOnePerson2.setForeground(new java.awt.Color(0, 100, 200));
        txtRoundOnePerson2.setText("Round 3 -");

        txtRoundOnePerson3.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        txtRoundOnePerson3.setForeground(new java.awt.Color(0, 100, 200));
        txtRoundOnePerson3.setText("Round 2 -");

        lblOutput.setFont(new java.awt.Font("Gadugi", 1, 24)); // NOI18N
        lblOutput.setForeground(new java.awt.Color(255, 255, 0));

        btnReset.setBackground(new java.awt.Color(120, 2, 2));
        btnReset.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnReset.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        btnReset.setForeground(new java.awt.Color(60, 2, 2));
        btnReset.setLabel("RESET GAME");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        panel1.setBackground(new java.awt.Color(0, 0, 0));
        panel1.setPreferredSize(new java.awt.Dimension(0, 3));

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );

        panel2.setBackground(new java.awt.Color(0, 0, 0));
        panel2.setPreferredSize(new java.awt.Dimension(0, 3));

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(panel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(555, 555, 555))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtYourChoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                .addComponent(btnBattle, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtRoundOnePerson2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtRoundOnePerson3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtRoundOnePerson1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblRoundThreePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblRoundOnePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRoundTwoPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(1, 1, 1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblRoundOneComputer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRoundTwoComputer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRoundThreeComputer, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(257, 257, 257)
                        .addComponent(lblHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUserScore, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPointsOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(362, 362, 362)
                        .addComponent(lblOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtComputerScore, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblPointsTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(163, 163, 163))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRoundOneComputer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRoundOnePerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtRoundOnePerson1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblRoundTwoComputer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblRoundThreeComputer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblRoundTwoPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblRoundThreePerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(txtRoundOnePerson3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtRoundOnePerson2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnReset, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnBattle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(61, 61, 61)
                        .addComponent(panel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(txtYourChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPointsTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPointsOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtComputerScore, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUserScore, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(104, 104, 104))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * 
     * @param intRandom is an integer between 1 and 3 inclusive
     * @return a random integer between 1 and 3 inclusive
     */
    public static int myRandomNumber (int intRandom){
        intRandom = (int)Math.round(Math.random() * 2 + 1);
        return intRandom;
        
    }
    private void btnBattleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBattleActionPerformed
        // TODO add your handling code here:
        //round 1, round 2, round 3
        //Round 0 becomes round 1 start, then each time after, it will be round 2, then round 3
        intRound++;
        //set a random number for the computer choice
        int intComputerChoice = myRandomNumber (intRandom);
        
        
        
        //if statement that executes based on round
        if (intRound == 1){
            //read the text of the user and set it as a variable
                String strChoiceOne = txtChoice.getText();
                
                // if statement that reads string input in variable, rewrites label in match history, and sets the choice as a number in an array
                if (strChoiceOne.equals ("Rock") || strChoiceOne.equals ("rock")){
                    lblRoundOnePerson.setText("You chose: Rock");
                    intUserArr1 [0] = 1;
                    //if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                    if (intComputerChoice == 1){
                        lblRoundOneComputer.setText ("The computer chooses: Rock");
                        intComputerArr2 [0] = 1;
                    }
                    //if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                    else if (intComputerChoice ==2){
                        lblRoundOneComputer.setText ("The computer chooses: Paper");
                        intComputerArr2 [0] = 2;
                    }
                    // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                    else if (intComputerChoice ==3){
                        lblRoundOneComputer.setText ("The computer chooses: Scissors");
                        intComputerArr2 [0] = 3;
                    }
                }
                // if statement that reads string input in variable, rewrites label in match history, and sets the choice as a number in an array
                else if (strChoiceOne.equals ("Paper") || strChoiceOne.equals ("paper")){
                        lblRoundOnePerson.setText("You chose: Paper");
                        intUserArr1 [0] = 2;
                            if (intComputerChoice == 1){
                                    lblRoundOneComputer.setText ("The computer chooses: Rock");
                                    intComputerArr2 [0] = 1;
                                }
                            else if (intComputerChoice ==2){
                                lblRoundOneComputer.setText ("The computer chooses: Paper");
                                intComputerArr2 [0] = 2;
                                }
                            else if (intComputerChoice ==3){
                                lblRoundOneComputer.setText ("The computer chooses: Scissors");
                                intComputerArr2 [0] = 3;
                                }
                    }
                // if statement that reads string input in variable, rewrites label in match history, and sets the choice as a number in an array
                else if (strChoiceOne.equals ("Scissors") || strChoiceOne.equals ("scissors")){
                    lblRoundOnePerson.setText("You chose: Scissors");
                    intUserArr1 [0] = 3;
                        if (intComputerChoice == 1){
                                lblRoundOneComputer.setText ("The computer chooses: Rock");
                                intComputerArr2 [0] = 1;
                            }
                        else if (intComputerChoice ==2){
                            lblRoundOneComputer.setText ("The computer chooses: Paper");
                            intComputerArr2 [0] = 2;
                            }
                        else if (intComputerChoice ==3){
                            lblRoundOneComputer.setText ("The computer chooses: Scissors");
                            intComputerArr2 [0] = 3;
                            }
                }
        }
        
        
        
        
        
        //if statement that executes based on round
        else if (intRound == 2){
            //read the text of the user and set it as a variable
                String strChoiceTwo = txtChoice.getText();
                 //if statement reads string input in variable, rewrites label in match history, and sets the choice as a number in an array
                if (strChoiceTwo.equals ("Rock") || strChoiceTwo.equals ("rock")){
                    intUserArr1 [1] = 1;
                    lblRoundTwoPerson.setText("You chose: Rock");
                    // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                        if (intComputerChoice == 1){
                            lblRoundTwoComputer.setText ("The computer chooses: Rock");
                            intComputerArr2 [1] = 1;
                            }
                         // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                        else if (intComputerChoice ==2){
                            lblRoundTwoComputer.setText ("The computer chooses: Paper");
                            intComputerArr2 [1] = 2;
                            }
                         // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                        else if (intComputerChoice ==3){
                            lblRoundTwoComputer.setText ("The computer chooses: Scissors");
                            intComputerArr2 [1] = 3;
                            }

                }
                 //if statement reads string input in variable, rewrites label in match history, and sets the choice as a number in an array
                else if (strChoiceTwo.equals ("Paper") || strChoiceTwo.equals ("paper")){
                    intUserArr1 [1] = 2;
                    lblRoundTwoPerson.setText("You chose: Paper");
                     // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                        if (intComputerChoice == 1){
                                lblRoundTwoComputer.setText ("The computer chooses: Rock");
                                intComputerArr2 [1] = 1;
                            }
                         // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                        else if (intComputerChoice ==2){
                                lblRoundTwoComputer.setText ("The computer chooses: Paper");
                                intComputerArr2 [1] = 2;
                            }
                        // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                        else if (intComputerChoice ==3){
                                lblRoundTwoComputer.setText ("The computer chooses: Scissors");
                                intComputerArr2 [1] = 3;
                            } 
                }
                 //if statement reads string input in variable, rewrites label in match history, and sets the choice as a number in an array
                else if (strChoiceTwo.equals ("Scissors") || strChoiceTwo.equals ("scissors")){
                    intUserArr1 [1] = 3;
                    lblRoundTwoPerson.setText("You chose: Scissors");
                    // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                        if (intComputerChoice == 1){
                            lblRoundTwoComputer.setText ("The computer chooses: Rock");
                            intComputerArr2 [1] = 1;
                        }
                        // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                        else if (intComputerChoice ==2){
                            lblRoundTwoComputer.setText ("The computer chooses: Paper");
                            intComputerArr2 [1] = 2;
                        }// if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                        
                        else if (intComputerChoice ==3){
                            lblRoundTwoComputer.setText ("The computer chooses: Scissors");
                            intComputerArr2 [1] = 3;
                        }
                } 
        }
        
        
        
        
        
       //if statement that executes based on round 
        else if (intRound == 3){
             //read the text of the user and set it as a variable
                String strChoiceThree = txtChoice.getText();
                 //if statment reads string input in variable, rewrites label in match history, and sets the choice as a number in an array
                if (strChoiceThree.equals ("Rock") || strChoiceThree.equals ("rock")){
                    lblRoundThreePerson.setText("You chose: Rock");
                    intUserArr1 [2] = 1;
                            if (intComputerChoice == 1){
                                // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                            lblRoundThreeComputer.setText ("The computer chooses: Rock");
                            intComputerArr2 [2] = 1;
                            }
                            // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                            else if (intComputerChoice ==2){
                                lblRoundThreeComputer.setText ("The computer chooses: Paper");
                                intComputerArr2 [2] = 2;
                            }
                            // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                            else if (intComputerChoice ==3){
                                lblRoundThreeComputer.setText ("The computer chooses: Scissors");
                                intComputerArr2 [2] = 3;
                            }         
       
                }
                
                //if statment reads string input in variable, rewrites label in match history, and sets the choice as a number in an array
                else if (strChoiceThree.equals ("Paper") || strChoiceThree.equals ("paper")){
                    lblRoundThreePerson.setText("You chose: Paper");
                    intUserArr1 [2] = 2;
                            // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                            if (intComputerChoice == 1){
                                lblRoundThreeComputer.setText ("The computer chooses: Rock");
                                intComputerArr2 [2] = 1;
                            }
                            // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                            else if (intComputerChoice ==2){
                                lblRoundThreeComputer.setText ("The computer chooses: Paper");
                                intComputerArr2 [2] = 2;
                            }
                            // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                            else if (intComputerChoice ==3){
                                lblRoundThreeComputer.setText ("The computer chooses: Scissors");
                                intComputerArr2 [2] = 3;
                            }
                            
               
                }
                //if statment reads string input in variable, rewrites label in match history, and sets the choice as a number in an array
                else if (strChoiceThree.equals ("Scissors") || strChoiceThree.equals ("scissors")){
                    lblRoundThreePerson.setText("You chose: Scissors");
                    intUserArr1 [2] = 3;
                            // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                            if (intComputerChoice == 1){
                                lblRoundThreeComputer.setText ("The computer chooses: Rock");
                                intComputerArr2 [2] = 1;
                            }
                            // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                            else if (intComputerChoice ==2){
                                lblRoundThreeComputer.setText ("The computer chooses: Paper");
                                intComputerArr2 [2] = 2;
                            }
                            // if statement reads computer choice based on random number, sets label in match history, sets computer choice as a number in the array
                            else if (intComputerChoice ==3){
                                lblRoundThreeComputer.setText ("The computer chooses: Scissors");
                                intComputerArr2 [2] = 3;
                            }         
                }
                
                
                //For loop that goes through index [0], [1], [2] of both arrays using a loop to compare them, and see which side gets a point for all three indexes.
                for (int i = 0; i <= 2; i = i+1){ 
                    //if statement that reads the number generated by the user input
                    if (intUserArr1 [i] == 1){
                        //if statement that reads the number generated by the computer and makes decision to reward a point or no point
                        if (intComputerArr2 [i] == 3){
                            intUserScore = intUserScore + 1;
                        //if statement that reads the number generated by the computer      
                        }
                        else if (intComputerArr2 [i] == 2){
                            intComputerScore = intComputerScore + 1;
                        //if statement that reads the number generated by the computer      
                        }
                        else if (intComputerArr2 [i] == 1){
                            intComputerScore = intComputerScore + 0;
                              
                        }
                    }
                    //if statement that reads the number generated by the user input
                    else if (intUserArr1 [i] == 2){
                        //if statement that reads the number generated by the computer
                        if (intComputerArr2 [i] == 1){
                            intUserScore++;
                        //if statement that reads the number generated by the computer    
                        }
                        else if (intComputerArr2 [i] == 3){
                            intComputerScore++;
                        //if statement that reads the number generated by the computer     
                        }
                        else if (intComputerArr2 [i] == 2){
                            intComputerScore = intComputerScore + 0;
                            
                        }
                           
                    }
                    //if statement that reads the number generated by the user input
                    else if (intUserArr1 [i] == 3){
                        //if statement that reads the number generated by the computer
                        if (intComputerArr2 [i] == 2){
                            intUserScore = intUserScore + 1;
                        //if statement that reads the number generated by the computer    
                        }
                        else if (intComputerArr2 [i] == 1){
                            intComputerScore++;
                        //if statement that reads the number generated by the computer      
                        }
                        else if (intComputerArr2 [i] == 3){
                            intComputerScore = intComputerScore + 0;
                              
                        } 
                    }  
                }
            //Final output to the user in the score boxes
            txtUserScore.setText(intUserScore + "");
            txtComputerScore.setText(intComputerScore + "");
            //if statements to determine who wins the game or if theres a tie
            final int WIN = 3;
            if (intUserScore ==WIN || intUserScore == 2){
                 lblOutput.setText("You have won the game!");
            }
            //if statements to determine who wins the game or if theres a tie
            else if ((intComputerScore ==WIN || intComputerScore == 2))
                lblOutput.setText("You have lost the game!");
            //if statements to determine who wins the game or if theres a tie
            else if (intUserScore ==1 && intComputerScore == 0){
                lblOutput.setText("You have won the game!");
            }
            //if statements to determine who wins the game or if theres a tie
            else if (intUserScore ==0 && intComputerScore == 1){
                lblOutput.setText("You have lost the game!");
            //if statements to determine who wins the game or if theres a tie    
            }
            else{
                lblOutput.setText ("It's a tie!");
            }
            //Reset the game after, data must be called within the same button
            int [] intUserArr1 = new int []{0,0,0};
            int [] intComputerArr2 = new int []{0,0,0};    
            intRound= 0;
            intRandom = 0;
            intUserScore = 0; 
            intComputerScore = 0;
            
        }
    }//GEN-LAST:event_btnBattleActionPerformed

    private void txtUserScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserScoreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserScoreActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
    //reset button resets all variables, values, and labels changed to original values or a value of 0
    intRound= 0;
    int [] intUser = new int []{0,0,0};
    int [] intComputer = new int []{0,0,0};    
    intRound= 0;
    intRandom = 0;
    intUserScore = 0; 
    intComputerScore = 0;
    lblRoundOnePerson.setText("You chose:");
    lblRoundTwoPerson.setText("You chose:");
    lblRoundThreePerson.setText("You chose:");
    lblRoundOneComputer.setText("The computer chooses:");
    lblRoundTwoComputer.setText("The computer chooses:");
    lblRoundThreeComputer.setText("The computer chooses:");
    txtUserScore.setText ("");
    txtComputerScore.setText ("");
    lblOutput.setText("");
    
    
        
// TODO add your handling code here:
    }//GEN-LAST:event_btnResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmU3Summative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmU3Summative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmU3Summative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmU3Summative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmU3Summative().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnBattle;
    private java.awt.Button btnReset;
    private java.awt.Label label1;
    private java.awt.Label lblHeader;
    private java.awt.Label lblOutput;
    private java.awt.Label lblPointsTwo;
    private java.awt.Label lblRoundOneComputer;
    private java.awt.Label lblRoundOnePerson;
    private java.awt.Label lblRoundThreeComputer;
    private java.awt.Label lblRoundThreePerson;
    private java.awt.Label lblRoundTwoComputer;
    private java.awt.Label lblRoundTwoPerson;
    private java.awt.Label lblTitle;
    private java.awt.Panel panel1;
    private java.awt.Panel panel2;
    private java.awt.TextField txtChoice;
    private java.awt.TextField txtComputerScore;
    private java.awt.Label txtPointsOne;
    private java.awt.Label txtRoundOnePerson1;
    private java.awt.Label txtRoundOnePerson2;
    private java.awt.Label txtRoundOnePerson3;
    private java.awt.TextField txtUserScore;
    private java.awt.Label txtYourChoice;
    // End of variables declaration//GEN-END:variables
}
